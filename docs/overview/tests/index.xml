<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tests on</title><link>https://polyphene.github.io/kythera/docs/overview/tests/</link><description>Recent content in Tests on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 06 Oct 2020 08:48:57 +0000</lastBuildDate><atom:link href="https://polyphene.github.io/kythera/docs/overview/tests/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing tests</title><link>https://polyphene.github.io/kythera/docs/overview/tests/writing-tests/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://polyphene.github.io/kythera/docs/overview/tests/writing-tests/</guid><description>Tests ran in Kythera are executed at the Wasm level. This effectively means that tests can be written in any language that supports compilation to this target. However, it is likely that when developing native actors a developer leverages the same language for both application actors and test actors.
In this section, we&amp;rsquo;ll go over the basic knowledge necessary to start implementing test actors in a Rust project.
Let&amp;rsquo;s take a look at a basic test:</description></item><item><title>Cheatcodes</title><link>https://polyphene.github.io/kythera/docs/overview/tests/cheatcodes/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://polyphene.github.io/kythera/docs/overview/tests/cheatcodes/</guid><description>Most of the time, simply testing your actors outputs isn&amp;rsquo;t enough. To manipulate the state of the blockchain, as well as test for specific edge cases, Kythera is shipped with a set of cheatcodes.
Cheatcodes allow you to change the block number, your identity, and more. They are invoked by calling specific functions on a specially designated actor ID: 98.
Let&amp;rsquo;s write an actor with a state that can only be updated by a selected actor ID, 250.</description></item><item><title>Understanding traces</title><link>https://polyphene.github.io/kythera/docs/overview/tests/traces/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://polyphene.github.io/kythera/docs/overview/tests/traces/</guid><description>Kythera can produce traces either for failing test (-vv) or all tests (-vvv).
Traces follow the same general format:
├─ [&amp;lt;Gas Charge&amp;gt;] OnChainMessage │ └─ ← &amp;lt;Charging message value&amp;gt; ├─ [&amp;lt;Call&amp;gt;] from 102 to f0104 method: &amp;lt;Method number callled&amp;gt; ├─ [&amp;lt;Gas Charge&amp;gt;] OnMethodInvocation │ └─ ← 75000.000 ├─ [&amp;lt;Gas Charge&amp;gt;] &amp;lt;Gas charge reason&amp;gt; │ └─ ← &amp;lt;Gas charge value&amp;gt; ... └─ ← &amp;lt;Execution exit code&amp;gt; Each call can have many more subcalls, each denoting a new message sent to another actor and a returned value.</description></item></channel></rss>